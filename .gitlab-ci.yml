stages:
  - test
  - coverage

variables:
  COVERAGE_THRESHOLD: "90"  # 覆盖率阈值（百分比）
  CARGO_INCREMENTAL: "0"     # 禁用增量编译以获得准确覆盖率

before_script:
  # 删除所有可能残留的 apt 源配置文件
  - rm -f /etc/apt/sources.list.d/*.list
  - rm -f /etc/apt/sources.list.d/*.sources
  - rm -f /etc/apt/sources.list.save
  - rm -f /etc/apt/sources.list~
  # 写入清华的 bullseye 源
  - echo "deb https://mirrors.tuna.tsinghua.edu.cn/debian bullseye main contrib non-free" > /etc/apt/sources.list
  - echo "deb https://mirrors.tuna.tsinghua.edu.cn/debian bullseye-updates main contrib non-free" >> /etc/apt/sources.list
  - echo "deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free" >> /etc/apt/sources.list
  # 更新源
  - apt-get update -y

# 使用 Rust 官方 Docker 镜像
image: rust:latest

# 缓存依赖以加速构建
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - target
    - .cargo

# 单元测试任务
unit_test:
  stage: test
  script:
    - cargo test --workspace --verbose
  artifacts:
    paths:
      - target/debug/deps/  # 保留测试二进制文件供覆盖率工具使用

# 生成覆盖率报告
coverage:
  stage: coverage
  needs: ["unit_test"]  # 依赖单元测试任务
  before_script:
    - apt-get update -y && apt-get install -y curl lcov
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source /usr/local/cargo/env
    - rustup component add llvm-tools

    # 设置环境变量以启用覆盖率数据收集
    - export RUSTFLAGS="-Cinstrument-coverage"
    - export LLVM_PROFILE_FILE="target/coverage/%p-%m.profraw"
  script:

    # 重新运行测试以收集覆盖率数据
    - cargo test --workspace

    # 生成 lcov 格式的报告
    - grcov . \
      --binary-path ./target/debug/deps/ \
      -s . \
      -t lcov \
      --branch \
      --ignore-not-existing \
      --ignore "/*" \
      --ignore "src/tests/*" \          
      --ignore "src/generated/*" \      
      --ignore "examples/*" \           
      --ignore "benches/*" \          
      -o lcov.info

    # 转换为 cobertura 格式（供 GitLab 解析）
    - lcov --list lcov.info  # 打印覆盖率摘要（调试用）
    - apt-get install -y python3-lcov-cobertura || pip3 install --user lcov-cobertura
    - lcov_cobertura lcov.info --output coverage.xml
    # 提取总覆盖率数值
    - TOTAL_COVERAGE=$(grep -oP '^TOTAL.*?\s+\K\d+' lcov.info | head -1)
    - echo "Total test cover